# generated by datamodel-codegen:
#   filename:  <stdin>
#   timestamp: 2022-08-14T13:21:22+00:00

from __future__ import annotations

from typing import List

from pydantic import BaseModel


class Disposition(BaseModel):
    default: int
    dub: int
    original: int
    comment: int
    lyrics: int
    karaoke: int
    forced: int
    hearing_impaired: int
    visual_impaired: int
    clean_effects: int
    attached_pic: int
    timed_thumbnails: int
    captions: int
    descriptions: int
    metadata: int
    dependent: int
    still_image: int


class Tags(BaseModel):
    creation_time: str
    language: str
    handler_name: str
    vendor_id: str
    encoder: str


class Stream(BaseModel):
    index: int
    codec_name: str
    codec_long_name: str
    profile: str
    codec_type: str
    codec_tag_string: str
    codec_tag: str
    width: int
    height: int
    coded_width: int
    coded_height: int
    closed_captions: int
    film_grain: int
    has_b_frames: int
    sample_aspect_ratio: str
    display_aspect_ratio: str
    pix_fmt: str
    level: int
    color_range: str
    color_space: str
    chroma_location: str
    field_order: str
    refs: int
    id: str
    r_frame_rate: str
    avg_frame_rate: str
    time_base: str
    start_pts: int
    start_time: str
    duration_ts: int
    duration: str
    bit_rate: str
    bits_per_raw_sample: str
    nb_frames: str
    disposition: Disposition
    tags: Tags


class Tags1(BaseModel):
    creation_time: str
    premiere_version: str


class Format(BaseModel):
    filename: str
    nb_streams: int
    nb_programs: int
    format_name: str
    format_long_name: str
    start_time: str
    duration: str
    size: str
    bit_rate: str
    probe_score: int
    tags: Tags1


class Video(BaseModel):
    streams: List[Stream]
    format: Format


class VideosRoot(BaseModel):
    videos: List[Video]
